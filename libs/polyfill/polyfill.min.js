/* Minimal ES6 Polyfills */
if (!Array.from) {
  Array.from = function(iterable) {
    if (iterable == null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }
    var O = Object(iterable);
    var len = O.length >>> 0;
    var A = new Array(len);
    for (var k = 0; k < len; k++) {
      A[k] = O[k];
    }
    return A;
  };
}

if (!Array.prototype.includes) {
  Array.prototype.includes = function(searchElement, fromIndex) {
    if (this == null) {
      throw new TypeError('"this" is null or not defined');
    }
    var o = Object(this);
    var len = o.length >>> 0;
    if (len === 0) return false;
    var n = fromIndex | 0;
    var k = Math.max(n >= 0 ? n : len + n, 0);
    while (k < len) {
      if (o[k] === searchElement) return true;
      k++;
    }
    return false;
  };
}

if (!String.prototype.includes) {
  String.prototype.includes = function(search, start) {
    if (typeof start !== 'number') {
      start = 0;
    }
    if (start + search.length > this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}

if (!Promise) {
  console.warn('This browser does not support Promises. Some features may not work.');
}

// Log that the polyfill loaded
console.log('Local polyfill loaded as fallback'); 