/* Minimal Plotly Simulation */
window.Plotly = window.Plotly || {};

// Simple plotting function that creates a placeholder visualization
Plotly.newPlot = function(element, data, layout, config) {
  if (typeof element === 'string') {
    element = document.getElementById(element);
  }
  
  if (!element) {
    console.error('Invalid element for plotting');
    return;
  }
  
  console.log('Local Plotly fallback creating placeholder visualization');
  
  // Create placeholder visualization
  element.innerHTML = '';
  element.style.position = 'relative';
  element.style.width = (layout && layout.width) ? layout.width + 'px' : '100%';
  element.style.height = (layout && layout.height) ? layout.height + 'px' : '400px';
  element.style.border = '1px solid #ddd';
  element.style.borderRadius = '8px';
  element.style.backgroundColor = '#f9f9f9';
  element.style.overflow = 'hidden';
  
  // Add title if available
  if (layout && layout.title) {
    var title = document.createElement('div');
    title.style.textAlign = 'center';
    title.style.padding = '10px';
    title.style.fontWeight = 'bold';
    title.style.fontSize = '16px';
    title.textContent = typeof layout.title === 'object' ? layout.title.text : layout.title;
    element.appendChild(title);
  }
  
  // Add message
  var message = document.createElement('div');
  message.style.position = 'absolute';
  message.style.top = '50%';
  message.style.left = '50%';
  message.style.transform = 'translate(-50%, -50%)';
  message.style.textAlign = 'center';
  message.style.width = '80%';
  message.style.color = '#666';
  
  message.innerHTML = '<div style="margin-bottom: 10px; font-size: 14px;">可视化加载失败</div>' +
                     '<div style="font-size: 12px;">网络连接问题导致无法加载可视化库<br>这是一个简化版的占位符</div>';
  
  element.appendChild(message);
  
  // Add simplified legend if we have data
  if (data && data.length) {
    var legend = document.createElement('div');
    legend.style.position = 'absolute';
    legend.style.bottom = '10px';
    legend.style.right = '10px';
    legend.style.backgroundColor = 'rgba(255,255,255,0.8)';
    legend.style.padding = '5px';
    legend.style.borderRadius = '4px';
    legend.style.fontSize = '12px';
    
    var legendContent = '<div style="font-weight: bold; margin-bottom: 5px;">数据集:</div>';
    for (var i = 0; i < data.length; i++) {
      var color = data[i].marker ? (data[i].marker.color || '#1f77b4') : '#1f77b4';
      var name = data[i].name || '数据 ' + (i + 1);
      legendContent += '<div style="margin: 3px 0;">' +
                       '<span style="display: inline-block; width: 10px; height: 10px; margin-right: 5px; background-color: ' + color + ';"></span>' +
                       name +
                       '</div>';
    }
    
    legend.innerHTML = legendContent;
    element.appendChild(legend);
  }
  
  // Return mock object with common methods
  return {
    element: element,
    data: data,
    layout: layout,
    _context: config,
    
    on: function() { return this; },
    removeListener: function() { return this; },
    
    relayout: function() { 
      console.log('Plotly.relayout called (fallback)'); 
      return Promise.resolve(this); 
    },
    
    restyle: function() { 
      console.log('Plotly.restyle called (fallback)'); 
      return Promise.resolve(this); 
    },
    
    update: function() { 
      console.log('Plotly.update called (fallback)'); 
      return Promise.resolve(this); 
    },
    
    purge: function() {
      if (element) element.innerHTML = '';
    }
  };
};

// Add additional Plotly functions 
Plotly.restyle = function() { console.log('Plotly.restyle called (fallback)'); return Promise.resolve(); };
Plotly.relayout = function() { console.log('Plotly.relayout called (fallback)'); return Promise.resolve(); };
Plotly.update = function() { console.log('Plotly.update called (fallback)'); return Promise.resolve(); };
Plotly.addTraces = function() { console.log('Plotly.addTraces called (fallback)'); return Promise.resolve(); };
Plotly.deleteTraces = function() { console.log('Plotly.deleteTraces called (fallback)'); return Promise.resolve(); };
Plotly.purge = function(element) { if (element) element.innerHTML = ''; };

console.log('Local Plotly loaded as fallback'); 