{
  "version": 3,
  "sources": ["../bundle-HPbZwt/checked-fetch.js", "../bundle-HPbZwt/strip-cf-connecting-ip-header.js", "../../../workers/ws-feedback-worker.js", "file:///C:/Users/45333/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "file:///C:/Users/45333/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-HPbZwt/middleware-insertion-facade.js", "file:///C:/Users/45333/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-HPbZwt/middleware-loader.entry.ts"],
  "sourceRoot": "D:\\Alex\\study-assist\\study-assist\\.wrangler\\tmp\\dev-84uM54",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "// Dedicated Feedback Worker for WS Directory\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const path = url.pathname;\r\n    \r\n    // CORS headers\r\n    const corsHeaders = {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    };\r\n\r\n    // Handle CORS preflight\r\n    if (request.method === 'OPTIONS') {\r\n      return new Response(null, { headers: corsHeaders });\r\n    }\r\n\r\n    try {\r\n      // Health check\r\n      if (path === '/api/health') {\r\n        return new Response(JSON.stringify({\r\n          status: 'ok',\r\n          timestamp: new Date().toISOString(),\r\n          kv_bound: !!env.KV_WS_FEEDBACK\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Submit feedback\r\n      if (path === '/api/feedback' && request.method === 'POST') {\r\n        if (!env.KV_WS_FEEDBACK) {\r\n          return new Response(JSON.stringify({\r\n            error: 'KV_WS_FEEDBACK not bound'\r\n          }), {\r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        let feedbackData;\r\n        \r\n        // Check if the request is JSON or form data\r\n        const contentType = request.headers.get('content-type') || '';\r\n        \r\n        if (contentType.includes('application/json')) {\r\n          // Handle JSON data\r\n          feedbackData = await request.json();\r\n        } else {\r\n          // Handle form data\r\n          const formData = await request.formData();\r\n          feedbackData = {\r\n            id: Date.now().toString(),\r\n            feedbackType: formData.get('feedbackType') || 'other',\r\n            subject: formData.get('subject') || '',\r\n            userName: formData.get('userName') || '\u533F\u540D\u7528\u6237',\r\n            userEmail: formData.get('userEmail') || '',\r\n            message: formData.get('message') || '',\r\n            status: 'pending',\r\n            submitTime: new Date().toISOString(),\r\n            deviceInfo: {\r\n              userAgent: request.headers.get('user-agent') || '',\r\n              screenSize: `${screen.width}x${screen.height}`,\r\n              viewport: `${window.innerWidth}x${window.innerHeight}`\r\n            }\r\n          };\r\n        }\r\n\r\n        // Generate ID if not provided\r\n        if (!feedbackData.id) {\r\n          feedbackData.id = Date.now().toString();\r\n        }\r\n\r\n        // Initialize like/dislike counters and other metadata\r\n        feedbackData.likes = feedbackData.likes || 0;\r\n        feedbackData.dislikes = feedbackData.dislikes || 0;\r\n        feedbackData.userLiked = feedbackData.userLiked || false;\r\n        feedbackData.userDisliked = feedbackData.userDisliked || false;\r\n        feedbackData.comments = feedbackData.comments || [];\r\n        feedbackData.status = feedbackData.status || 'pending';\r\n        feedbackData.submitTime = feedbackData.submitTime || new Date().toISOString();\r\n        feedbackData.updateTime = feedbackData.updateTime || feedbackData.submitTime;\r\n        \r\n        // Store device info if not provided\r\n        if (!feedbackData.deviceInfo) {\r\n          feedbackData.deviceInfo = {\r\n            userAgent: request.headers.get('user-agent') || '',\r\n            timestamp: new Date().toISOString()\r\n          };\r\n        }\r\n\r\n        // Store feedback data\r\n        await env.KV_WS_FEEDBACK.put(`feedback_${feedbackData.id}`, JSON.stringify(feedbackData));\r\n        \r\n        // Update index\r\n        await updateFeedbackIndex(env, feedbackData.id);\r\n\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          id: feedbackData.id,\r\n          message: 'Feedback submitted successfully',\r\n          data: feedbackData\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Get feedback list\r\n      if (path === '/api/feedback' && request.method === 'GET') {\r\n        if (!env.KV_WS_FEEDBACK) {\r\n          return new Response(JSON.stringify({\r\n            error: 'KV_WS_FEEDBACK not bound'\r\n          }), {\r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        // Get index\r\n        let indexData = await env.KV_WS_FEEDBACK.get('feedback_index');\r\n        let feedbackIds = indexData ? JSON.parse(indexData) : [];\r\n        \r\n        // If index is empty, try to rebuild\r\n        if (feedbackIds.length === 0) {\r\n          console.log('Index is empty, attempting to rebuild...');\r\n          feedbackIds = await rebuildFeedbackIndex(env);\r\n        }\r\n\r\n        // Get feedback data\r\n        const feedbacks = [];\r\n        for (const id of feedbackIds) {\r\n          try {\r\n            const feedbackData = await env.KV_WS_FEEDBACK.get(`feedback_${id}`);\r\n            if (feedbackData) {\r\n              const feedback = JSON.parse(feedbackData);\r\n              \r\n              // Get comments for this feedback\r\n              const commentsData = await env.KV_WS_FEEDBACK.get(`comments_${id}`);\r\n              feedback.comments = commentsData ? JSON.parse(commentsData) : [];\r\n              feedback.commentsCount = feedback.comments.length;\r\n              \r\n              feedbacks.push(feedback);\r\n            }\r\n          } catch (e) {\r\n            console.error(`Error retrieving feedback ${id}:`, e);\r\n          }\r\n        }\r\n\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          count: feedbacks.length,\r\n          data: feedbacks\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Get single feedback\r\n      if (path.startsWith('/api/feedback/') && request.method === 'GET') {\r\n        if (!env.KV_WS_FEEDBACK) {\r\n          return new Response(JSON.stringify({\r\n            error: 'KV_WS_FEEDBACK not bound'\r\n          }), {\r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedbackId = path.split('/').pop();\r\n        const feedbackData = await env.KV_WS_FEEDBACK.get(`feedback_${feedbackId}`);\r\n        \r\n        if (!feedbackData) {\r\n          return new Response(JSON.stringify({\r\n            error: 'Feedback not found'\r\n          }), {\r\n            status: 404,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedback = JSON.parse(feedbackData);\r\n        \r\n        // Get comments for this feedback\r\n        const commentsData = await env.KV_WS_FEEDBACK.get(`comments_${feedbackId}`);\r\n        feedback.comments = commentsData ? JSON.parse(commentsData) : [];\r\n        feedback.commentsCount = feedback.comments.length;\r\n\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          data: feedback\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Update feedback\r\n      if (path.startsWith('/api/feedback/') && request.method === 'PUT') {\r\n        if (!env.KV_WS_FEEDBACK) {\r\n          return new Response(JSON.stringify({\r\n            error: 'KV_WS_FEEDBACK not bound'\r\n          }), {\r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedbackId = path.split('/').pop();\r\n        const updateData = await request.json();\r\n        \r\n        // Get existing feedback\r\n        const existingData = await env.KV_WS_FEEDBACK.get(`feedback_${feedbackId}`);\r\n        if (!existingData) {\r\n          return new Response(JSON.stringify({\r\n            error: 'Feedback not found'\r\n          }), {\r\n            status: 404,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        // Merge data\r\n        const feedbackData = {\r\n          ...JSON.parse(existingData),\r\n          ...updateData,\r\n          id: feedbackId, // Ensure ID doesn't change\r\n          updateTime: new Date().toISOString()\r\n        };\r\n\r\n        // Store updated feedback\r\n        await env.KV_WS_FEEDBACK.put(`feedback_${feedbackId}`, JSON.stringify(feedbackData));\r\n\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          message: 'Feedback updated successfully',\r\n          data: feedbackData\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Like feedback\r\n      if (path.endsWith('/like') && request.method === 'POST') {\r\n        if (!env.KV_WS_FEEDBACK) {\r\n          return new Response(JSON.stringify({\r\n            error: 'KV_WS_FEEDBACK not bound'\r\n          }), {\r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedbackId = path.split('/')[3]; // Extract ID from /api/feedback/{id}/like\r\n        \r\n        // Get existing feedback\r\n        const feedbackData = await env.KV_WS_FEEDBACK.get(`feedback_${feedbackId}`);\r\n        if (!feedbackData) {\r\n          return new Response(JSON.stringify({\r\n            error: 'Feedback not found'\r\n          }), {\r\n            status: 404,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedback = JSON.parse(feedbackData);\r\n        \r\n        // Initialize like/dislike counters if not exist\r\n        if (!feedback.likes) feedback.likes = 0;\r\n        if (!feedback.dislikes) feedback.dislikes = 0;\r\n        if (!feedback.userLiked) feedback.userLiked = false;\r\n        if (!feedback.userDisliked) feedback.userDisliked = false;\r\n        \r\n        // Toggle like state\r\n        if (feedback.userLiked) {\r\n          // Unlike\r\n          feedback.likes = Math.max(0, feedback.likes - 1);\r\n          feedback.userLiked = false;\r\n        } else {\r\n          // Like\r\n          feedback.likes += 1;\r\n          feedback.userLiked = true;\r\n          \r\n          // Remove dislike if exists\r\n          if (feedback.userDisliked) {\r\n            feedback.dislikes = Math.max(0, feedback.dislikes - 1);\r\n            feedback.userDisliked = false;\r\n          }\r\n        }\r\n        \r\n        // Update feedback\r\n        await env.KV_WS_FEEDBACK.put(`feedback_${feedbackId}`, JSON.stringify(feedback));\r\n\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          likes: feedback.likes,\r\n          dislikes: feedback.dislikes,\r\n          userLiked: feedback.userLiked,\r\n          userDisliked: feedback.userDisliked\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Dislike feedback\r\n      if (path.endsWith('/dislike') && request.method === 'POST') {\r\n        if (!env.KV_WS_FEEDBACK) {\r\n          return new Response(JSON.stringify({\r\n            error: 'KV_WS_FEEDBACK not bound'\r\n          }), {\r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedbackId = path.split('/')[3]; // Extract ID from /api/feedback/{id}/dislike\r\n        \r\n        // Get existing feedback\r\n        const feedbackData = await env.KV_WS_FEEDBACK.get(`feedback_${feedbackId}`);\r\n        if (!feedbackData) {\r\n          return new Response(JSON.stringify({\r\n            error: 'Feedback not found'\r\n          }), {\r\n            status: 404,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedback = JSON.parse(feedbackData);\r\n        \r\n        // Initialize like/dislike counters if not exist\r\n        if (!feedback.likes) feedback.likes = 0;\r\n        if (!feedback.dislikes) feedback.dislikes = 0;\r\n        if (!feedback.userLiked) feedback.userLiked = false;\r\n        if (!feedback.userDisliked) feedback.userDisliked = false;\r\n        \r\n        // Toggle dislike state\r\n        if (feedback.userDisliked) {\r\n          // Remove dislike\r\n          feedback.dislikes = Math.max(0, feedback.dislikes - 1);\r\n          feedback.userDisliked = false;\r\n        } else {\r\n          // Add dislike\r\n          feedback.dislikes += 1;\r\n          feedback.userDisliked = true;\r\n          \r\n          // Remove like if exists\r\n          if (feedback.userLiked) {\r\n            feedback.likes = Math.max(0, feedback.likes - 1);\r\n            feedback.userLiked = false;\r\n          }\r\n        }\r\n        \r\n        // Update feedback\r\n        await env.KV_WS_FEEDBACK.put(`feedback_${feedbackId}`, JSON.stringify(feedback));\r\n\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          likes: feedback.likes,\r\n          dislikes: feedback.dislikes,\r\n          userLiked: feedback.userLiked,\r\n          userDisliked: feedback.userDisliked\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Get comments for feedback\r\n      if (path.endsWith('/comments') && request.method === 'GET') {\r\n        if (!env.KV_WS_FEEDBACK) {\r\n          return new Response(JSON.stringify({\r\n            error: 'KV_WS_FEEDBACK not bound'\r\n          }), {\r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedbackId = path.split('/')[3]; // Extract ID from /api/feedback/{id}/comments\r\n        \r\n        // Get comments for this feedback\r\n        const commentsData = await env.KV_WS_FEEDBACK.get(`comments_${feedbackId}`);\r\n        const comments = commentsData ? JSON.parse(commentsData) : [];\r\n\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          comments: comments\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add comment to feedback\r\n      if (path.endsWith('/comments') && request.method === 'POST') {\r\n        if (!env.KV_WS_FEEDBACK) {\r\n          return new Response(JSON.stringify({\r\n            error: 'KV_WS_FEEDBACK not bound'\r\n          }), {\r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedbackId = path.split('/')[3]; // Extract ID from /api/feedback/{id}/comments\r\n        \r\n        // Get existing comments\r\n        const commentsData = await env.KV_WS_FEEDBACK.get(`comments_${feedbackId}`);\r\n        let comments = commentsData ? JSON.parse(commentsData) : [];\r\n        \r\n        // Add new comment\r\n        const commentData = await request.json();\r\n        const newComment = {\r\n          id: Date.now().toString(),\r\n          feedbackId: feedbackId,\r\n          userName: commentData.userName || '\u533F\u540D\u7528\u6237',\r\n          message: commentData.message,\r\n          createTime: new Date().toISOString()\r\n        };\r\n        \r\n        comments.push(newComment);\r\n        \r\n        // Store updated comments\r\n        await env.KV_WS_FEEDBACK.put(`comments_${feedbackId}`, JSON.stringify(comments));\r\n\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          comment: newComment\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Delete feedback\r\n      if (path.startsWith('/api/feedback/') && request.method === 'DELETE') {\r\n        if (!env.KV_WS_FEEDBACK) {\r\n          return new Response(JSON.stringify({\r\n            error: 'KV_WS_FEEDBACK not bound'\r\n          }), {\r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        const feedbackId = path.split('/').pop();\r\n        \r\n        // Check if feedback exists\r\n        const feedbackData = await env.KV_WS_FEEDBACK.get(`feedback_${feedbackId}`);\r\n        if (!feedbackData) {\r\n          return new Response(JSON.stringify({\r\n            error: 'Feedback not found'\r\n          }), {\r\n            status: 404,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              ...corsHeaders\r\n            }\r\n          });\r\n        }\r\n\r\n        // Delete feedback and its comments\r\n        await env.KV_WS_FEEDBACK.delete(`feedback_${feedbackId}`);\r\n        await env.KV_WS_FEEDBACK.delete(`comments_${feedbackId}`);\r\n        \r\n        // Update index\r\n        await removeFromFeedbackIndex(env, feedbackId);\r\n\r\n        return new Response(JSON.stringify({\r\n          success: true,\r\n          message: 'Feedback deleted successfully'\r\n        }), {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            ...corsHeaders\r\n          }\r\n        });\r\n      }\r\n\r\n      // Default response for unmatched routes\r\n      return new Response(JSON.stringify({\r\n        error: 'Not Found',\r\n        path: path\r\n      }), {\r\n        status: 404,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Error processing request:', error);\r\n      return new Response(JSON.stringify({\r\n        error: 'Internal Server Error',\r\n        message: error.message\r\n      }), {\r\n        status: 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n// Helper function to update feedback index\r\nasync function updateFeedbackIndex(env, feedbackId) {\r\n  try {\r\n    let indexData = await env.KV_WS_FEEDBACK.get('feedback_index');\r\n    let feedbackIds = indexData ? JSON.parse(indexData) : [];\r\n    \r\n    // Add new ID to the beginning of the array (newest first)\r\n    if (!feedbackIds.includes(feedbackId)) {\r\n      feedbackIds.unshift(feedbackId);\r\n      \r\n      // Keep only the most recent 1000 entries\r\n      if (feedbackIds.length > 1000) {\r\n        feedbackIds = feedbackIds.slice(0, 1000);\r\n      }\r\n      \r\n      await env.KV_WS_FEEDBACK.put('feedback_index', JSON.stringify(feedbackIds));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating feedback index:', error);\r\n  }\r\n}\r\n\r\n// Helper function to remove from feedback index\r\nasync function removeFromFeedbackIndex(env, feedbackId) {\r\n  try {\r\n    let indexData = await env.KV_WS_FEEDBACK.get('feedback_index');\r\n    let feedbackIds = indexData ? JSON.parse(indexData) : [];\r\n    \r\n    // Remove ID from the array\r\n    feedbackIds = feedbackIds.filter(id => id !== feedbackId);\r\n    \r\n    await env.KV_WS_FEEDBACK.put('feedback_index', JSON.stringify(feedbackIds));\r\n  } catch (error) {\r\n    console.error('Error removing from feedback index:', error);\r\n  }\r\n}\r\n\r\n// Helper function to rebuild feedback index\r\nasync function rebuildFeedbackIndex(env) {\r\n  try {\r\n    console.log('Rebuilding feedback index...');\r\n    \r\n    const feedbackIds = [];\r\n    const now = Date.now();\r\n    \r\n    // Search for feedback keys\r\n    // Since we use timestamp as ID, we can search by time ranges\r\n    const searchRanges = [\r\n      { start: now - 60 * 60 * 1000, end: now }, // Last hour\r\n      { start: now - 24 * 60 * 60 * 1000, end: now - 60 * 60 * 1000 }, // Last 24 hours\r\n      { start: now - 7 * 24 * 60 * 60 * 1000, end: now - 24 * 60 * 60 * 1000 } // Last 7 days\r\n    ];\r\n    \r\n    for (const range of searchRanges) {\r\n      // Check every 5 minutes to reduce API calls\r\n      for (let timestamp = range.end; timestamp >= range.start; timestamp -= 5 * 60 * 1000) {\r\n        try {\r\n          const testData = await env.KV_WS_FEEDBACK.get(`feedback_${timestamp}`);\r\n          if (testData) {\r\n            feedbackIds.push(timestamp.toString());\r\n            console.log('Found feedback:', timestamp);\r\n          }\r\n        } catch (e) {\r\n          // Ignore errors, continue searching\r\n        }\r\n        \r\n        // Limit search to avoid timeout\r\n        if (feedbackIds.length >= 50) break;\r\n      }\r\n      if (feedbackIds.length >= 50) break;\r\n    }\r\n    \r\n    if (feedbackIds.length > 0) {\r\n      // Sort by time in descending order\r\n      feedbackIds.sort((a, b) => parseInt(b) - parseInt(a));\r\n      await env.KV_WS_FEEDBACK.put('feedback_index', JSON.stringify(feedbackIds));\r\n      console.log('Index rebuilt successfully, found', feedbackIds.length, 'records');\r\n    } else {\r\n      console.log('No feedback records found');\r\n    }\r\n    \r\n    return feedbackIds;\r\n  } catch (error) {\r\n    console.error('Error rebuilding feedback index:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Helper function to safely parse JSON\r\nfunction safeParseJSON(jsonString, defaultValue = {}) {\r\n  try {\r\n    return jsonString ? JSON.parse(jsonString) : defaultValue;\r\n  } catch (e) {\r\n    console.error('Error parsing JSON:', e);\r\n    return defaultValue;\r\n  }\r\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"D:\\\\Alex\\\\study-assist\\\\study-assist\\\\workers\\\\ws-feedback-worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\45333\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\45333\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"D:\\\\Alex\\\\study-assist\\\\study-assist\\\\workers\\\\ws-feedback-worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"D:\\\\Alex\\\\study-assist\\\\study-assist\\\\.wrangler\\\\tmp\\\\bundle-HPbZwt\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\45333\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"D:\\\\Alex\\\\study-assist\\\\study-assist\\\\.wrangler\\\\tmp\\\\bundle-HPbZwt\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"D:\\\\Alex\\\\study-assist\\\\study-assist\\\\.wrangler\\\\tmp\\\\bundle-HPbZwt\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
